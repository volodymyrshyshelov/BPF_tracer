import sys
import grpc
import threading
import locale
from datetime import datetime, timedelta
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QTableView, QLineEdit, QPushButton, QComboBox, QLabel,
    QSplitter, QTreeWidget, QTreeWidgetItem, QHeaderView, QCheckBox
)
from PyQt6.QtCore import Qt, QAbstractTableModel, QModelIndex, QTimer
from PyQt6.QtGui import QColor, QFont, QBrush

import tracer_pb2
import tracer_pb2_grpc

locale.setlocale(locale.LC_TIME, "")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_EVENTS = 10000        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
BATCH_UPDATE_MS = 100     # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI (–º—Å)
HIGHLIGHT_NEW_EVENTS_MS = 2000  # –í—Ä–µ–º—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π (–º—Å)

# –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –∏–∑ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
EVENT_TYPES = [
    "",  # –õ—é–±–æ–π —Ç–∏–ø (ANY)
    "EXECVE",
    "OPEN",
    "READ",
    "WRITE",
    "ACCEPT",
    "CONNECT",
    "CLONE",
    "EXIT",
    "TCP_CONN",
    "UPROBE"
]

def clean_str(s, max_len=200):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã"""
    try:
        if isinstance(s, bytes):
            s = s.decode("utf-8", errors="replace")
        s = ''.join(c for c in s.replace('\x00', '').strip() if c.isprintable())
        return s[:max_len] + '...' if len(s) > max_len else s
    except Exception:
        return "Invalid"

class EventTableModel(QAbstractTableModel):
    COLUMNS = ["Time", "Type", "PID", "Command", "Details"]
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.events = []  # –í—Å–µ —Å–æ–±—ã—Ç–∏—è (–Ω–æ–≤—ã–µ –≤ –Ω–∞—á–∞–ª–µ)
        self.filtered_events = []  # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.pid_filter = ""
        self.type_filter = ""
        self.search_text = ""
        self.new_events = set()  # ID –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        self.last_event_id = 0
        self.auto_clean = True  # –§–ª–∞–≥ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–∞
        
    def rowCount(self, parent=QModelIndex()):
        return len(self.filtered_events)
    
    def columnCount(self, parent=QModelIndex()):
        return len(self.COLUMNS)
    
    def data(self, index, role=Qt.ItemDataRole.DisplayRole):
        if not index.isValid():
            return None
            
        row = index.row()
        col = index.column()
        
        if row >= len(self.filtered_events):
            return None
            
        event = self.filtered_events[row]
        
        if role == Qt.ItemDataRole.DisplayRole:
            if col == 0:  # Time
                return event.timestamp.strftime("%H:%M:%S.%f")[:-3]
            elif col == 1:  # Type
                return event.type
            elif col == 2:  # PID
                return str(event.pid)
            elif col == 3:  # Command
                return clean_str(event.comm)
            elif col == 4:  # Details
                return clean_str(event.details)
                
        elif role == Qt.ItemDataRole.BackgroundRole:
            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if event.id in self.new_events:
                return QBrush(QColor(255, 255, 200))  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π
                
            # –¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
            if "ERROR" in event.details:
                return QBrush(QColor(255, 200, 200))
            elif "EXECVE" in event.type:
                return QBrush(QColor(230, 240, 255))
            elif "TCP_CONN" in event.type:
                return QBrush(QColor(230, 255, 230))
            elif "OPEN" in event.type:
                return QBrush(QColor(255, 230, 230))
            elif "UPROBE" in event.type:
                return QBrush(QColor(255, 230, 255))
                
        elif role == Qt.ItemDataRole.FontRole:
            # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if event.id in self.new_events:
                font = QFont()
                font.setBold(True)
                return font
                
        return None
    
    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        if orientation == Qt.Orientation.Horizontal and role == Qt.ItemDataRole.DisplayRole:
            return self.COLUMNS[section]
        return None
        
    def add_events(self, events):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—á–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞"""
        if not events:
            return
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        for event in events:
            self.last_event_id += 1
            event.id = self.last_event_id
            self.new_events.add(event.id)
            
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –Ω–∞—á–∞–ª–æ
        self.events = events + self.events
        
        # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ ANY
        if self.auto_clean and len(self.events) > MAX_EVENTS:
            self.events = self.events[:MAX_EVENTS]
            
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        self.apply_filters()
        
    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.beginResetModel()
        
        self.filtered_events = [
            e for e in self.events
            if (not self.pid_filter or str(e.pid) == self.pid_filter) and
               (not self.type_filter or e.type == self.type_filter) and
               (not self.search_text or self.search_text.lower() in clean_str(e.details).lower())
        ]
        
        # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        if not self.auto_clean and len(self.filtered_events) > MAX_EVENTS:
            self.filtered_events = self.filtered_events[:MAX_EVENTS]
        
        self.endResetModel()
        
    def set_filters(self, pid_filter, type_filter, search_text):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.pid_filter = pid_filter
        self.type_filter = type_filter
        self.search_text = search_text
        
        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è ANY
        self.auto_clean = (type_filter == "")
        self.apply_filters()
        
    def clear_highlight(self, event_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è"""
        if event_id in self.new_events:
            self.new_events.remove(event_id)
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for row, event in enumerate(self.filtered_events):
                if event.id == event_id:
                    index = self.index(row, 0)
                    self.dataChanged.emit(index, index)
                    break

class TracerUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("eBPF Tracer")
        self.setGeometry(100, 100, 1200, 800)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        main_layout = QVBoxLayout(central_widget)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã
        self.pause_button = QPushButton("‚è∏Ô∏è Pause")
        self.pause_button.setCheckable(True)
        self.pause_button.setStyleSheet("QPushButton:checked { background-color: #FF9999; }")
        self.pause_button.clicked.connect(self.toggle_pause)
        control_layout.addWidget(self.pause_button)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_button = QPushButton("üóëÔ∏è Clear")
        clear_button.clicked.connect(self.clear_events)
        control_layout.addWidget(clear_button)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("Receiving events...")
        control_layout.addWidget(self.status_label)
        
        control_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞
        self.auto_scroll_check = QCheckBox("Auto-scroll to new events")
        self.auto_scroll_check.setChecked(True)
        control_layout.addWidget(self.auto_scroll_check)
        
        main_layout.addLayout(control_layout)
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_layout = QHBoxLayout()
        
        self.pid_filter = QLineEdit()
        self.pid_filter.setPlaceholderText("Filter by PID...")
        self.pid_filter.setMaximumWidth(150)
        filter_layout.addWidget(QLabel("PID:"))
        filter_layout.addWidget(self.pid_filter)
        
        self.type_filter = QComboBox()
        self.type_filter.addItems(EVENT_TYPES)
        self.type_filter.setCurrentIndex(0)  # ANY
        self.type_filter.setMaximumWidth(150)
        filter_layout.addWidget(QLabel("Type:"))
        filter_layout.addWidget(self.type_filter)
        
        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Search in details...")
        filter_layout.addWidget(QLabel("Search:"))
        filter_layout.addWidget(self.search_box)
        
        apply_btn = QPushButton("Apply Filters")
        apply_btn.clicked.connect(self.apply_filters)
        filter_layout.addWidget(apply_btn)
        
        clear_btn = QPushButton("Clear Filters")
        clear_btn.clicked.connect(self.clear_filters)
        filter_layout.addWidget(clear_btn)
        
        main_layout.addLayout(filter_layout)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–µ—Ç–∞–ª–µ–π
        splitter = QSplitter(Qt.Orientation.Vertical)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
        self.table_view = QTableView()
        self.model = EventTableModel()
        self.table_view.setModel(self.model)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.table_view.setSelectionBehavior(QTableView.SelectionBehavior.SelectRows)
        self.table_view.setSelectionMode(QTableView.SelectionMode.SingleSelection)
        self.table_view.doubleClicked.connect(self.show_event_details)
        self.table_view.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Interactive)
        self.table_view.verticalHeader().setDefaultSectionSize(24)
        self.table_view.setSortingEnabled(True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        self.table_view.setColumnWidth(0, 120)  # Time
        self.table_view.setColumnWidth(1, 80)   # Type
        self.table_view.setColumnWidth(2, 70)   # PID
        self.table_view.setColumnWidth(3, 150)  # Command
        
        splitter.addWidget(self.table_view)
        
        # –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
        self.details_tree = QTreeWidget()
        self.details_tree.setHeaderLabels(["Field", "Value"])
        self.details_tree.setHeaderHidden(False)
        self.details_tree.setRootIsDecorated(False)
        splitter.addWidget(self.details_tree)
        
        splitter.setSizes([600, 200])
        main_layout.addWidget(splitter)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = self.statusBar()
        self.status_bar.showMessage("Connecting to tracer service...")
        
        # –ë—É—Ñ–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        self.event_buffer = []
        self.buffer_lock = threading.Lock()
        self.paused = False
        self.event_count = 0
        self.last_scroll_position = 0
        
        # –¢–∞–π–º–µ—Ä—ã
        self.update_timer = QTimer(self)
        self.update_timer.setInterval(BATCH_UPDATE_MS)
        self.update_timer.timeout.connect(self.process_buffered_events)
        self.update_timer.start()
        
        self.highlight_timer = QTimer(self)
        self.highlight_timer.setInterval(500)
        self.highlight_timer.timeout.connect(self.update_highlights)
        self.highlight_timer.start()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ gRPC
        self.connect_grpc()
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∞
        self.table_view.verticalScrollBar().valueChanged.connect(self.track_scroll_position)
        
    def connect_grpc(self):
        try:
            self.channel = grpc.insecure_channel('localhost:50051')
            self.stub = tracer_pb2_grpc.TracerServiceStub(self.channel)
            
            threading.Thread(target=self.stream_events, daemon=True).start()
            self.status_bar.showMessage("Connected to tracer service")
        except Exception as e:
            self.status_bar.showMessage(f"Connection error: {str(e)}")
        
    def stream_events(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ç gRPC —Å–µ—Ä–≤–µ—Ä–∞"""
        request = tracer_pb2.EventRequest()
        
        try:
            for pb_event in self.stub.StreamEvents(request):
                if self.paused:
                    continue
                    
                event = type('Event', (), {
                    'type': pb_event.type,
                    'pid': pb_event.pid,
                    'comm': pb_event.comm,
                    'timestamp': pb_event.timestamp.ToDatetime(),
                    'details': pb_event.details
                })
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±—É—Ñ–µ—Ä (—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π)
                with self.buffer_lock:
                    self.event_buffer.append(event)
                
                self.event_count += 1
                if self.event_count % 100 == 0:
                    self.status_label.setText(f"Events: {self.event_count}")
                    
        except grpc.RpcError as e:
            self.status_bar.showMessage(f"gRPC error: {e.details()}")
            
    def process_buffered_events(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ç–∞–π–º–µ—Ä—É)"""
        if self.paused or not self.event_buffer:
            return
            
        # –ó–∞–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞
        with self.buffer_lock:
            batch = self.event_buffer
            self.event_buffer = []
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—á–∫—É –≤ –º–æ–¥–µ–ª—å (–Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤–≤–µ—Ä—Ö—É)
        self.model.add_events(batch)
        
        # "–£–º–Ω—ã–π" –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∏–Ω–≥
        if self.auto_scroll_check.isChecked():
            scroll_bar = self.table_view.verticalScrollBar()
            current_pos = scroll_bar.value()
            
            # –°–∫—Ä–æ–ª–ª–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–ª –≤–Ω–∏–∑
            if current_pos <= 10:
                self.table_view.scrollToTop()
    
    def update_highlights(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        now = datetime.now()
        to_remove = []
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π
        for event_id in self.model.new_events:
            for event in self.model.events:
                if event.id == event_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                    if (now - event.timestamp) > timedelta(milliseconds=HIGHLIGHT_NEW_EVENTS_MS):
                        to_remove.append(event_id)
                    break
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        for event_id in to_remove:
            self.model.clear_highlight(event_id)
    
    def track_scroll_position(self, value):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è —É–º–Ω–æ–≥–æ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞"""
        self.last_scroll_position = value
        
    def toggle_pause(self, checked):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–∞—É–∑—ã"""
        self.paused = checked
        if checked:
            self.pause_button.setText("‚ñ∂Ô∏è Resume")
            self.status_label.setText(f"PAUSED | Events: {self.event_count}")
        else:
            self.pause_button.setText("‚è∏Ô∏è Pause")
            self.status_label.setText(f"Receiving events... | Events: {self.event_count}")
    
    def clear_events(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π"""
        self.model.beginResetModel()
        self.model.events = []
        self.model.filtered_events = []
        self.model.new_events = set()
        self.model.endResetModel()
        self.event_count = 0
        self.status_label.setText("Events cleared")
        
    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ UI"""
        pid_text = self.pid_filter.text().strip()
        type_text = self.type_filter.currentText()
        search_text = self.search_box.text().strip()
        
        self.model.set_filters(pid_text, type_text, search_text)
        
    def clear_filters(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.pid_filter.clear()
        self.type_filter.setCurrentIndex(0)  # ANY
        self.search_box.clear()
        self.model.set_filters("", "", "")
        
    def show_event_details(self, index):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        self.details_tree.clear()
        
        if not index.isValid():
            return
            
        event = self.model.filtered_events[index.row()]
        
        details = [
            ("Type", event.type),
            ("Timestamp", event.timestamp.strftime("%Y-%m-%d %H:%M:%S.%f")),
            ("PID", str(event.pid)),
            ("Command", clean_str(event.comm)),
            ("Details", clean_str(event.details))
        ]
        
        # –î–ª—è UPROBE –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if event.type == "UPROBE":
            parts = event.details.split('|')
            if len(parts) >= 2:
                details.append(("Function", parts[0]))
                details.append(("Arguments", parts[1]))
        
        for field, value in details:
            item = QTreeWidgetItem([field, value])
            self.details_tree.addTopLevelItem(item)
            
        self.details_tree.expandAll()
        self.details_tree.resizeColumnToContents(0)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = TracerUI()
    window.show()
    sys.exit(app.exec())